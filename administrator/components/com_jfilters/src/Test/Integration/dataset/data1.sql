-- Insert the date for the tables defined in our schema.sql

INSERT INTO `#__fields` (`id`, `asset_id`, `context`, `group_id`, `title`, `name`, `label`, `default_value`, `type`, `note`, `description`, `state`, `required`, `checked_out`, `checked_out_time`, `ordering`, `params`, `fieldparams`, `language`, `created_time`, `created_user_id`, `modified_time`, `modified_by`, `access`, `only_use_in_subform`) VALUES
(1, 89, 'com_content.article', 0, 'Science', 'science', 'Science', '', 'list', '', 'Type/field', 1, 1, 0, NULL, 0, '{"class":"","label_class":"","show_on":"","render_class":"","showlabel":"1","label_render_class":"","display":"2","prefix":"","suffix":"","layout":"","display_readonly":"2"}', '{"multiple":"","options":{"__field10":{"name":"Computer Science","value":"Computer-Science"},"__field11":{"name":"History","value":"History"},"__field12":{"name":"Poltics","value":"Poltics"}}}', '*', '2020-07-13 16:19:33', 498, '2020-07-13 16:19:49', 498, 1, 0),
(2, 90, 'com_content.article', 0, 'Level', 'level', 'Level', '', 'integer', '', 'The level/depth of the content', 1, 1, 0, NULL, 0, '{"hint":"Level","class":"","label_class":"","show_on":"","render_class":"","showlabel":"1","label_render_class":"","display":"2","prefix":"","suffix":"","layout":"","display_readonly":"2"}', '{"multiple":"","first":1,"last":5,"step":1}', '*', '2020-07-13 16:21:34', 498, '2020-07-13 16:21:34', 498, 1, 0),
(3, 91, 'com_content.article', 0, 'Some Text', 'some-text', 'Some Text', '', 'text', '', 'The level/depth of the content', 1, 1, 0, NULL, 0, '{"hint":"","class":"","label_class":"","show_on":"","render_class":"","showlabel":"1","label_render_class":"","display":"2","prefix":"","suffix":"","layout":"","display_readonly":"2"}', '{"filter":"raw","maxlength":""}', '*', '2020-07-13 16:21:34', 498, '2020-07-13 16:21:34', 498, 1, 0),
(4, 92, 'com_content.article', 0, 'Checkboxes', 'checkboxes', 'checkboxes', '', 'checkboxes', '', 'Checkboxes test', 0, 0, 0, NULL, 0, '{"hint":"","class":"","label_class":"","show_on":"","render_class":"","value_render_class":"","showlabel":"1","label_render_class":"","display":"2","prefix":"","suffix":"","layout":"","display_readonly":"2"}', '{"options":{"options0":{"name":"Aba","value":"Aba"},"options1":{"name":"Baba","value":"Baba"},"options2":{"name":"Cava","value":"Cava"},"options3":{"name":"2","value":"2"},"options4":{"name":"3","value":"3"},"options5":{"name":"100","value":"100"}, "options6":{"name":"Λάκης","value":"Λάκης"},"options7":{"name":"βάκης","value":"βάκης"}, "options8":{"name":"Τάκης","value":"Τάκης"}, "options9":{"name":"Βάκος","value":"Βάκος"}, "options10":{"name":"Abé","value":"Abé"}}}', '*', '2020-07-13 16:21:34', 498, '2020-07-13 16:21:34', 498, 1, 0),
(5, 154, 'com_content.article', 0, 'calendar', 'calendar', 'calendar', '', 'calendar', '', '', 1, 0, 0, NULL, 0, '{\"hint\":\"\",\"class\":\"\",\"label_class\":\"\",\"show_on\":\"\",\"render_class\":\"\",\"value_render_class\":\"\",\"showlabel\":\"1\",\"label_render_class\":\"\",\"display\":\"2\",\"prefix\":\"\",\"suffix\":\"\",\"layout\":\"\",\"display_readonly\":\"2\"}', '{\"showtime\":1}', '*', '2021-12-14 13:49:43', 498, '2022-10-18 11:52:26', 498, 1, 0);

INSERT INTO `#__fields_values` (`field_id`, `item_id`, `value`) VALUES
(1, '1', 'Computer-Science'),
(2, '1', '4'),
(1, '2', 'Computer-Science'),
(2, '2', '3'),
(1, '3', 'Computer-Science'),
(2, '3', '3'),
(2, '7', '3'),
(1, '4', 'Computer-Science'),
(2, '4', '4'),
(1, '5', 'Computer-Science'),
(1, '6', 'Computer-Science'),
(2, '6', '2'),
(1, '7', 'Computer-Science'),
(2, '7', '1'),
(1, '8', 'Manufacturing'),
(2, '8', '3'),
(1, '9', 'Manufacturing'),
(2, '9', '4'),
(3, '7', 'Ζαβαρακατρανεμια ζαβαρακατρανεμια αληλουια αληλουια αληλουια ζαβαρακατρανεμια ηλεος ηλεος λαμα λαμα ναμα ναμα νενια αληλουια αληλουια ηλεος ηλεος ηλεος'),
(3, '9', '3'),
(4, '9', 'Aba'),
(4, '9', 'Abé'),
(4, '9', 'Baba'),
(4, '9', 'Cava'),
(4, '9', '2'),
(4, '9', '3'),
(4, '9', 'βάκης'),
(4, '8', 'Βάκος'),
(4, '7', 'Βάκος'),
(4, '9', 'Τάκης'),
(4, '8', 'Τάκης'),
(4, '9', 'Λάκης'),
(4, '9', '100'),
(5, '7', '2023-04-20 17:46:49'),
(5, '8', '2023-04-23 00:46:49'),
(5, '9', '2023-04-29 23:46:49');

INSERT INTO `#__categories` (`id`, `asset_id`, `parent_id`, `lft`, `rgt`, `level`, `path`, `extension`, `title`, `alias`, `note`, `description`, `published`, `checked_out`, `checked_out_time`, `access`, `params`, `metadesc`, `metakey`, `metadata`, `created_user_id`, `created_time`, `modified_user_id`, `modified_time`, `hits`, `language`, `version`) VALUES
(1, 0, 0, 0, 29, 0, '', 'system', 'ROOT', 'root', '', '', 1, 0, NULL, 1, '{}', '', '', '{}', 498, '2020-07-07 15:39:04', 498, '2020-07-07 15:39:04', 0, '*', 1),
(2, 27, 1, 1, 2, 1, 'uncategorised', 'com_content', 'Uncategorised', 'uncategorised', '', '', 1, 0, NULL, 1, '{"category_layout":"","image":"","workflow_id":"use_default"}', '', '', '{"author":"","robots":""}', 498, '2020-07-07 15:39:04', 498, '2020-07-07 15:39:04', 0, '*', 1),
(3, 28, 1, 3, 4, 1, 'uncategorised', 'com_banners', 'Uncategorised', 'uncategorised', '', '', 1, 0, NULL, 1, '{"category_layout":"","image":""}', '', '', '{"author":"","robots":""}', 498, '2020-07-07 15:39:04', 498, '2020-07-07 15:39:04', 0, '*', 1),
(4, 29, 1, 5, 6, 1, 'uncategorised', 'com_contact', 'Uncategorised', 'uncategorised', '', '', 1, 0, NULL, 1, '{"category_layout":"","image":""}', '', '', '{"author":"","robots":""}', 498, '2020-07-07 15:39:04', 498, '2020-07-07 15:39:04', 0, '*', 1),
(5, 30, 1, 7, 8, 1, 'uncategorised', 'com_newsfeeds', 'Uncategorised', 'uncategorised', '', '', 1, 0, NULL, 1, '{"category_layout":"","image":""}', '', '', '{"author":"","robots":""}', 498, '2020-07-07 15:39:04', 498, '2020-07-07 15:39:04', 0, '*', 1),
(7, 32, 1, 9, 10, 1, 'uncategorised', 'com_users', 'Uncategorised', 'uncategorised', '', '', 1, 0, NULL, 1, '{"category_layout":"","image":""}', '', '', '{"author":"","robots":""}', 498, '2020-07-07 15:39:04', 498, '2020-07-07 15:39:04', 0, '*', 1),
(8, 87, 1, 11, 18, 1, 'programming', 'com_content', 'Programming', 'programming', '', '', 1, 0, NULL, 1, '{"category_layout":"","image":"","image_alt":"","workflow_id":"use_default"}', '', '', '{"author":"","robots":""}', 498, '2020-07-13 14:29:11', 498, '2020-07-13 14:29:11', 0, 'en-GB', 1),
(9, 88, 8, 12, 17, 2, 'programming/php', 'com_content', 'PHP', 'php', '', '', 1, 0, NULL, 1, '{"category_layout":"","image":"","image_alt":"","workflow_id":"use_default"}', '', '', '{"author":"","robots":""}', 498, '2020-07-13 14:29:28', 498, '2020-07-13 14:29:28', 0, '*', 1),
(10, 99, 9, 13, 14, 3, 'programming/php/php-compile', 'com_content', 'PHP compile', 'php-compile', '', '<p>PHP compile</p>', 1, 0, NULL, 1, '{"category_layout":"","image":"","image_alt":"","workflow_id":"use_default"}', '', '', '{"author":"","robots":""}', 498, '2020-08-17 15:45:07', 498, '2020-08-17 15:45:07', 0, 'de-DE', 1),
(11, 102, 1, 19, 22, 1, 'manufacturing', 'com_content', 'Manufacturing', 'manufacturing', '', '', 1, 0, NULL, 1, '{"category_layout":"","image":"","image_alt":"","workflow_id":"use_default"}', '', '', '{"author":"","robots":""}', 498, '2020-08-20 13:31:57', 498, '2020-08-20 13:31:57', 0, '*', 1),
(12, 103, 11, 20, 21, 2, 'manufacturing/steel', 'com_content', 'Steel', 'steel', '', '', 1, 0, NULL, 1, '{"category_layout":"","image":"","image_alt":"","workflow_id":"use_default"}', '', '', '{"author":"","robots":""}', 498, '2020-08-20 13:36:15', 498, '2020-08-20 13:36:15', 0, '*', 1),
(13, 104, 9, 15, 16, 3, 'programming/php/php-type-hinting', 'com_content', 'Php Type hinting', 'php-type-hinting', '', '<p>Php 7 allows scalar type hinting</p>', 1, 0, NULL, 1, '{"category_layout":"","image":"","image_alt":"","workflow_id":"use_default"}', '', '', '{"author":"","robots":""}', 498, '2020-08-20 13:36:58', 498, '2020-08-20 13:39:00', 0, '*', 1),
(14, 105, 1, 23, 26, 1, 'parent', 'com_content', 'Parent', 'parent', '', '', 1, 0, NULL, 1, '{"category_layout":"","image":"","image_alt":"","workflow_id":"use_default"}', '', '', '{"author":"","robots":""}', 498, '2020-07-13 14:29:11', 498, '2020-07-13 14:29:11', 0, 'en-GB', 1),
(15, 106, 14, 24, 25, 2, 'parent/child', 'com_content', 'child', 'child', '', '', 1, 0, NULL, 1, '{"category_layout":"","image":"","image_alt":"","workflow_id":"use_default"}', '', '', '{"author":"","robots":""}', 498, '2020-07-13 14:29:11', 498, '2020-07-13 14:29:11', 0, 'en-GB', 1),
(16, 107, 1, 27, 28, 1, 'unpublished', 'com_content', 'unpublished', 'unpublished', '', '', 1, 0, NULL, 1, '{"category_layout":"","image":"","image_alt":"","workflow_id":"use_default"}', '', '', '{"author":"","robots":""}', 498, '2020-08-20 13:31:57', 498, '2020-08-20 13:31:57', 0, '*', 1);

--
-- Dumping data for table `bt10c_content`
--

INSERT INTO `#__content` (`id`, `asset_id`, `title`, `alias`, `introtext`, `fulltext`, `state`, `catid`, `created`, `created_by`, `created_by_alias`, `modified`, `modified_by`, `checked_out`, `checked_out_time`, `publish_up`, `publish_down`, `images`, `urls`, `attribs`, `version`, `ordering`, `metakey`, `metadesc`, `access`, `hits`, `metadata`, `featured`, `language`, `note`) VALUES
(1, 86, 'PhpIze', 'phpize', '<div class="post-text">\r\n<p>Yes, you should build the extension manually by the following step</p>\r\n<pre class="lang-php prettyprint prettyprinted"><code><span class="pln">phpize\r\n</span><span class="pun">./</span><span class="pln">configure </span><span class="pun">--</span><span class="kwd">with</span><span class="pun">-</span><span class="pln">php</span><span class="pun">-</span><span class="pln">config</span><span class="pun">=</span><span class="str">/usr/</span><span class="kwd">local</span><span class="pun">/</span><span class="pln">php</span><span class="pun">/</span><span class="pln">bin</span><span class="pun">/</span><span class="pln">php</span><span class="pun">-</span><span class="pln">config\r\nmake\r\nmake install</span></code></pre>\r\n<p>make sure you run <code>phpize</code> and <code>php-config</code> pointing to your correct php verison.</p>\r\n<p>not in the <code>/usr/bin/phpize</code> and <code>/usr/include/php</code></p>\r\n<p>make sure use <code>--with-php-config</code></p>\r\n</div>', '', 1, 9, '2020-07-13 14:28:56', 498, '', '2020-07-13 16:22:31', 498, 0, NULL, '2020-07-13 14:28:56', NULL, '{"image_intro":"","float_intro":"","image_intro_alt":"","image_intro_caption":"","image_fulltext":"","float_fulltext":"","image_fulltext_alt":"","image_fulltext_caption":""}', '{"urla":"","urlatext":"","targeta":"","urlb":"","urlbtext":"","targetb":"","urlc":"","urlctext":"","targetc":""}', '{"article_layout":"","show_title":"","link_titles":"","show_tags":"","show_intro":"","info_block_position":"","info_block_show_title":"","show_category":"","link_category":"","show_parent_category":"","link_parent_category":"","show_author":"","link_author":"","show_create_date":"","show_modify_date":"","show_publish_date":"","show_item_navigation":"","show_vote":"","show_hits":"","show_noauth":"","urls_position":"","alternative_readmore":"","article_page_title":"","show_publishing_options":"","show_article_options":"","show_urls_images_backend":"","show_urls_images_frontend":""}', 4, 0, '', '', 1, 2, '{"robots":"","author":"","rights":""}', 0, '*', ''),
(2, 91, 'SOLID Principles: S - Single Responsibility', 'solid-principles-s-single-responsibility', '<p id="3dd7" class="iv iw bj ix b iy kn ja jb ko jd je kp jg jh kq jj jk kr jm jn fg ct" data-selectable-paragraph=""><mark class="tu tv mp">In programming, the </mark><mark class="tu tv mp"><a class="cg dj jp jq jr js" href="https://en.wikipedia.org/wiki/Single_responsibility_principle" target="_blank" rel="noopener">Single Responsibility Principle</a></mark><mark class="tu tv mp"> states that every module or class should have responsibility over a single part of the functionality provided by the software.</mark></p>\r\n<p id="3385" class="iv iw bj ix b iy iz ja jb jc jd je jf jg jh ji jj jk jl jm jn fg ct" data-selectable-paragraph="">You may have heard the quote: “<em class="jt">Do one thing and do it well</em>”.<br />This refers to the single responsibility principle.<br />In the article <em class="jt">Principles of Object Oriented Design, </em>Robert C. Martin defines a responsibility as a ‘reason to change’, and concludes that a class or module should have one, and only one, reason to be changed.</p>\r\n<p id="1353" class="iv iw bj ix b iy iz ja jb jc jd je jf jg jh ji jj jk jl jm jn fg ct" data-selectable-paragraph="">Let’s do an example of how to write a piece of code that violates this principle.</p>\r\n<pre>class User\r\n{\r\n    void CreatePost(Database db, string postMessage)\r\n    {\r\n        try\r\n        {\r\n            db.Add(postMessage);\r\n        }\r\n        catch (Exception ex)\r\n        {\r\n            db.LogError("An error occured: ", ex.ToString());\r\n            File.WriteAllText("\\LocalErrors.txt", ex.ToString());\r\n        }\r\n    }\r\n}<br /><br /></pre>\r\n<p id="cafe" class="iv iw bj ix b iy iz ja jb jc jd je jf jg jh ji jj jk jl jm jn fg ct" data-selectable-paragraph="">We notice how the <code class="gk ky kz la lb b">CreatePost()</code> method has too much responsibility, given that it can both create a new post, log an error in the database, and log an error in a local file.<br />This violates the single responsibility principle.</p>\r\n<p id="2458" class="iv iw bj ix b iy iz ja jb jc jd je jf jg jh ji jj jk jl jm jn fg ct" data-selectable-paragraph="">Let’s try to correct it.</p>\r\n<p class="iv iw bj ix b iy iz ja jb jc jd je jf jg jh ji jj jk jl jm jn fg ct" data-selectable-paragraph=""> </p>\r\n<pre>class Post\r\n{\r\n    private ErrorLogger errorLogger = new ErrorLogger();\r\n\r\n    void CreatePost(Database db, string postMessage)\r\n    {\r\n        try\r\n        {\r\n            db.Add(postMessage);\r\n        }\r\n        catch (Exception ex)\r\n        {\r\n            errorLogger.log(ex.ToString())\r\n        }\r\n    }\r\n}\r\n\r\nclass ErrorLogger\r\n{\r\n    void log(string error)\r\n    {\r\n      db.LogError("An error occured: ", error);\r\n      File.WriteAllText("\\LocalErrors.txt", error);\r\n    }\r\n}</pre>', '', 1, 8, '2020-07-13 16:27:36', 498, '', '2020-07-13 16:27:36', 498, 0, NULL, '2020-07-13 16:27:36', NULL, '{"image_intro":"","float_intro":"","image_intro_alt":"","image_intro_caption":"","image_fulltext":"","float_fulltext":"","image_fulltext_alt":"","image_fulltext_caption":""}', '{"urla":"","urlatext":"","targeta":"","urlb":"","urlbtext":"","targetb":"","urlc":"","urlctext":"","targetc":""}', '{"article_layout":"","show_title":"","link_titles":"","show_tags":"","show_intro":"","info_block_position":"","info_block_show_title":"","show_category":"","link_category":"","show_parent_category":"","link_parent_category":"","show_author":"","link_author":"","show_create_date":"","show_modify_date":"","show_publish_date":"","show_item_navigation":"","show_vote":"","show_hits":"","show_noauth":"","urls_position":"","alternative_readmore":"","article_page_title":"","show_publishing_options":"","show_article_options":"","show_urls_images_backend":"","show_urls_images_frontend":""}', 1, 2, '', '', 1, 1, '{"robots":"","author":"","rights":""}', 0, '*', ''),
(3, 92, 'SOLID Principles: O - Open for extensions, closed for modification', 'solid-principles-o-open-for-extensions-closed-for-modification', '<p id="fd2f" class="iv iw bj ix b iy kn ja jb ko jd je kp jg jh kq jj jk kr jm jn fg ct" data-selectable-paragraph="">In programming, the <a class="cg dj jp jq jr js" href="https://en.wikipedia.org/wiki/Open%E2%80%93closed_principle" target="_blank" rel="noopener">open/closed principle</a> states that software entities (classes, modules, functions, etc.) should be open for extensions, but closed for modification.</p>\r\n<p id="b9d5" class="iv iw bj ix b iy iz ja jb jc jd je jf jg jh ji jj jk jl jm jn fg ct" data-selectable-paragraph="">If you have a general understanding of OOP, you probably already know about polymorphism. We can make sure that our code is compliant with the open/closed principle by utilizing inheritance and/or implementing interfaces that enable classes to polymorphically substitute for each other.</p>\r\n<p class="iv iw bj ix b iy iz ja jb jc jd je jf jg jh ji jj jk jl jm jn fg ct" data-selectable-paragraph="">This may sound confusing, so let’s do an example that will make it very clear what I mean.</p>\r\n<pre>class Post\r\n{\r\n    void CreatePost(Database db, string postMessage)\r\n    {\r\n        if (postMessage.StartsWith("#"))\r\n        {\r\n            db.AddAsTag(postMessage);\r\n        }\r\n        else\r\n        {\r\n            db.Add(postMessage);\r\n        }\r\n    }\r\n}<br /><br /></pre>\r\n<p id="e764" class="iv iw bj ix b iy iz ja jb jc jd je jf jg jh ji jj jk jl jm jn fg ct" data-selectable-paragraph="">In this code snippet we need to do something specific whenever a post starts with the character ‘#’.<br />However, the above implementation violates the open/closed principle in the way this code differs the behavior on the starting letter.<br />If we later wanted to also include mentions starting with ‘@’, we’d have to modify the class with an extra ‘else if’ in the <code class="gk ky kz la lb b">CreatePost()</code> method.</p>\r\n<p id="9dfd" class="iv iw bj ix b iy iz ja jb jc jd je jf jg jh ji jj jk jl jm jn fg ct" data-selectable-paragraph="">Let’s try to make this code compliant with the open/closed principle by simply using inheritance.</p>\r\n<p class="iv iw bj ix b iy iz ja jb jc jd je jf jg jh ji jj jk jl jm jn fg ct" data-selectable-paragraph=""> </p>\r\n<pre>class Post\r\n{\r\n    void CreatePost(Database db, string postMessage)\r\n    {\r\n        db.Add(postMessage);\r\n    }\r\n}\r\n\r\nclass TagPost : Post\r\n{\r\n    override void CreatePost(Database db, string postMessage)\r\n    {\r\n        db.AddAsTag(postMessage);\r\n    }\r\n}</pre>', '', 1, 8, '2020-07-13 16:42:18', 498, '', '2020-07-13 16:42:18', 498, 0, NULL, '2020-07-13 16:42:18', NULL, '{"image_intro":"","float_intro":"","image_intro_alt":"","image_intro_caption":"","image_fulltext":"","float_fulltext":"","image_fulltext_alt":"","image_fulltext_caption":""}', '{"urla":"","urlatext":"","targeta":"","urlb":"","urlbtext":"","targetb":"","urlc":"","urlctext":"","targetc":""}', '{"article_layout":"","show_title":"","link_titles":"","show_tags":"","show_intro":"","info_block_position":"","info_block_show_title":"","show_category":"","link_category":"","show_parent_category":"","link_parent_category":"","show_author":"","link_author":"","show_create_date":"","show_modify_date":"","show_publish_date":"","show_item_navigation":"","show_vote":"","show_hits":"","show_noauth":"","urls_position":"","alternative_readmore":"","article_page_title":"","show_publishing_options":"","show_article_options":"","show_urls_images_backend":"","show_urls_images_frontend":""}', 1, 1, '', '', 1, 1, '{"robots":"","author":"","rights":""}', 0, '*', ''),
(4, 93, 'SOLID Principles: L - Liskov Substitution', 'solid-principles-l-liskov-substitution', '<p>The principle defines that objects of the superclass can be replaced with objects of the sub-class without breaking the application. Hence they should behave in a "similar" way.</p>', '', 1, 8, '2020-07-13 16:51:07', 498, '', '2020-07-13 16:55:28', 498, 0, NULL, '2020-07-13 16:51:07', NULL, '{"image_intro":"","float_intro":"","image_intro_alt":"","image_intro_caption":"","image_fulltext":"","float_fulltext":"","image_fulltext_alt":"","image_fulltext_caption":""}', '{"urla":"","urlatext":"","targeta":"","urlb":"","urlbtext":"","targetb":"","urlc":"","urlctext":"","targetc":""}', '{"article_layout":"","show_title":"","link_titles":"","show_tags":"","show_intro":"","info_block_position":"","info_block_show_title":"","show_category":"","link_category":"","show_parent_category":"","link_parent_category":"","show_author":"","link_author":"","show_create_date":"","show_modify_date":"","show_publish_date":"","show_item_navigation":"","show_vote":"","show_hits":"","show_noauth":"","urls_position":"","alternative_readmore":"","article_page_title":"","show_publishing_options":"","show_article_options":"","show_urls_images_backend":"","show_urls_images_frontend":""}', 2, 1, '', '', 1, 1, '{"robots":"","author":"","rights":""}', 1, '*', ''),
(5, 94, 'SOLID Principles: I - Interface Segregation', 'solid-principles-i-interface-segregation', '	<p>This principle states that Interfaces should be minimal. Intefaces should be broken up to smaller ones when they exceed a certain scope.</p>\r\n<p>This principle looks like the single responsibility principle, in it\'s core.</p>', '', 1, 8, '2020-07-13 16:54:02', 498, '', '2020-07-13 16:55:41', 498, 498, '2020-07-20 14:49:29', '2020-07-13 16:54:02', NULL, '{"image_intro":"","float_intro":"","image_intro_alt":"","image_intro_caption":"","image_fulltext":"","float_fulltext":"","image_fulltext_alt":"","image_fulltext_caption":""}', '{"urla":"","urlatext":"","targeta":"","urlb":"","urlbtext":"","targetb":"","urlc":"","urlctext":"","targetc":""}', '{"article_layout":"","show_title":"","link_titles":"","show_tags":"","show_intro":"","info_block_position":"","info_block_show_title":"","show_category":"","link_category":"","show_parent_category":"","link_parent_category":"","show_author":"","link_author":"","show_create_date":"","show_modify_date":"","show_publish_date":"","show_item_navigation":"","show_vote":"","show_hits":"","show_noauth":"","urls_position":"","alternative_readmore":"","article_page_title":"","show_publishing_options":"","show_article_options":"","show_urls_images_backend":"","show_urls_images_frontend":""}', 2, 0, '', '', 1, 0, '{"robots":"","author":"","rights":""}', 0, '*', ''),
(6, 95, ' 	 SOLID Principles: D - Dependency Inevrsion', 'solid-principles-d-dependency-inevrsion', '<p>Classes should depend on abstractions and not on implementations</p>\r\n<p> </p>\r\n<ul class="">\r\n<li id="1537" class="iv iw bj ix b iy iz ja jb jc jd je jf jg jh ji jj jk jl jm jn lc ld le ct" data-selectable-paragraph="">High-level modules should not depend on low-level modules. Both should depend on abstractions.</li>\r\n<li id="7d31" class="iv iw bj ix b iy lf ja jb lg jd je lh jg jh li jj jk lj jm jn lc ld le ct" data-selectable-paragraph="">Abstractions should not depend on details. Details should depend on abstractions.</li>\r\n</ul>', '', 1, 8, '2020-07-13 16:54:57', 498, '', '2020-07-13 16:56:03', 498, 0, NULL, '2020-07-13 16:54:57', NULL, '{"image_intro":"","float_intro":"","image_intro_alt":"","image_intro_caption":"","image_fulltext":"","float_fulltext":"","image_fulltext_alt":"","image_fulltext_caption":""}', '{"urla":"","urlatext":"","targeta":"","urlb":"","urlbtext":"","targetb":"","urlc":"","urlctext":"","targetc":""}', '{"article_layout":"","show_title":"","link_titles":"","show_tags":"","show_intro":"","info_block_position":"","info_block_show_title":"","show_category":"","link_category":"","show_parent_category":"","link_parent_category":"","show_author":"","link_author":"","show_create_date":"","show_modify_date":"","show_publish_date":"","show_item_navigation":"","show_vote":"","show_hits":"","show_noauth":"","urls_position":"","alternative_readmore":"","article_page_title":"","show_publishing_options":"","show_article_options":"","show_urls_images_backend":"","show_urls_images_frontend":""}', 2, 0, '', '', 1, 0, '{"robots":"","author":"","rights":""}', 1, '*', ''),
(7, 101, 'PHP compiled or interpreted?', 'php-compiled-or-interpreted', '<div class="post-text">\r\n<p>Both. PHP is compiled down to an intermediate bytecode that is then interpreted by the runtime engine.</p>\r\n<p>The PHP compiler\'s job is to parse your PHP code and convert it into a form suitable for the runtime engine. Among its tasks:</p>\r\n<ul>\r\n<li>Ignore comments</li>\r\n<li>Resolve variables, function names, and so forth and create the symbol table</li>\r\n<li>Construct the abstract syntax tree of your program</li>\r\n<li>Write the bytecode</li>\r\n</ul>\r\n<p>Depending on your PHP setup, this step is typically done just once, the first time the script is called. The compiler output is cached to speed up access on subsequent uses. If the script is modified, however, the compilation step is done again.</p>\r\n<p>The runtime engine walks the AST and bytecode when the script is called. The symbol table is used to store the values of variables and provide the bytecode addresses for functions.</p>\r\n<p>This process of compiling to bytecode and interpreting it at runtime is typical for languages that run on some kind of virtual runtime machine including Perl, Java, Ruby, Smalltalk, and others.</p>\r\n</div>', '', 1, 10, '2020-08-18 13:05:08', 498, '', '2020-08-18 13:05:08', 498, 0, NULL, '2020-08-18 13:05:08', NULL, '{"image_intro":"","float_intro":"","image_intro_alt":"","image_intro_caption":"","image_fulltext":"","float_fulltext":"","image_fulltext_alt":"","image_fulltext_caption":""}', '{"urla":"","urlatext":"","targeta":"","urlb":"","urlbtext":"","targetb":"","urlc":"","urlctext":"","targetc":""}', '{"article_layout":"","show_title":"","link_titles":"","show_tags":"","show_intro":"","info_block_position":"","info_block_show_title":"","show_category":"","link_category":"","show_parent_category":"","link_parent_category":"","show_author":"","link_author":"","show_create_date":"","show_modify_date":"","show_publish_date":"","show_item_navigation":"","show_vote":"","show_hits":"","show_noauth":"","urls_position":"","alternative_readmore":"","article_page_title":"","show_publishing_options":"","show_article_options":"","show_urls_images_backend":"","show_urls_images_frontend":""}', 1, 0, '', '', 1, 0, '{"robots":"","author":"","rights":""}', 0, '*', ''),
(8, 105, 'Lean manufacturing', 'lean-manufacturing', '<p>Womack and Jones define Lean as "...a way to do more and more with less and less - less human effort, less equipment, less time, and less space - while coming closer and closer to providing customers exactly what they want" and then translate this into five key principles: <sup id="cite_ref-5" class="reference"><a href="https://en.wikipedia.org/wiki/Lean_manufacturing#cite_note-5">[5]</a></sup></p>\r\n<ol>\r\n<li>Value - Specify the value desired by the customer. "Form a team for each product to stick with that product during its entire production cycle", "Enter into a dialogue with the customer" (e.g. <a title="Voice of the customer" href="https://en.wikipedia.org/wiki/Voice_of_the_customer">Voice of the customer</a>)</li>\r\n<li>The Value Stream - Identify the <a title="Value-stream mapping" href="https://en.wikipedia.org/wiki/Value-stream_mapping">value stream</a> for each product providing that value and challenge all of the wasted steps (generally nine out of ten) currently necessary to provide it</li>\r\n<li>Flow - Make the product flow continuously through the remaining value-added steps</li>\r\n<li>Pull - Introduce pull between all steps where continuous flow is possible</li>\r\n<li>Perfection - Manage toward perfection so that the number of steps and the amount of time and information needed to serve the customer continually falls</li>\r\n</ol>', '', 1, 11, '2020-08-21 15:35:20', 498, '', '2020-08-21 15:36:20', 498, 498, '2020-08-21 15:36:20', '2020-08-21 15:35:20', NULL, '{"image_intro":"","float_intro":"","image_intro_alt":"","image_intro_caption":"","image_fulltext":"","float_fulltext":"","image_fulltext_alt":"","image_fulltext_caption":""}', '{"urla":"","urlatext":"","targeta":"","urlb":"","urlbtext":"","targetb":"","urlc":"","urlctext":"","targetc":""}', '{"article_layout":"","show_title":"","link_titles":"","show_tags":"","show_intro":"","info_block_position":"","info_block_show_title":"","show_category":"","link_category":"","show_parent_category":"","link_parent_category":"","show_author":"","link_author":"","show_create_date":"","show_modify_date":"","show_publish_date":"","show_item_navigation":"","show_vote":"","show_hits":"","show_noauth":"","urls_position":"","alternative_readmore":"","article_page_title":"","show_publishing_options":"","show_article_options":"","show_urls_images_backend":"","show_urls_images_frontend":""}', 2, 1, '', '', 1, 0, '{"robots":"","author":"","rights":""}', 0, '*', ''),
(9, 106, 'Toyotism', 'toyotism', '<p>The main objectives of the TPS are to design out overburden (<a title="Muri (Japanese term)" href="https://en.wikipedia.org/wiki/Muri_(Japanese_term)">muri</a>) and inconsistency (<a title="Mura (Japanese term)" href="https://en.wikipedia.org/wiki/Mura_(Japanese_term)">mura</a>), and to eliminate waste (<a title="Muda (Japanese term)" href="https://en.wikipedia.org/wiki/Muda_(Japanese_term)">muda</a>). The most significant effects on process value delivery are achieved by designing a process capable of delivering the required results smoothly; by designing out "mura" (inconsistency). It is also crucial to ensure that the process is as flexible as necessary without stress or "muri" (overburden) since this generates "muda" (waste). Finally the tactical improvements of waste reduction or the elimination of muda are very valuable. There are eight kinds of muda that are addressed in the TPS:<sup id="cite_ref-Ohno1998_3-0" class="reference"><a href="https://en.wikipedia.org/wiki/Toyota_Production_System#cite_note-Ohno1998-3">[3]</a></sup></p>', '', 1, 11, '2020-08-25 11:29:59', 498, '', '2020-08-25 11:29:59', 498, 0, NULL, '2020-08-25 11:29:59', NULL, '{"image_intro":"","float_intro":"","image_intro_alt":"","image_intro_caption":"","image_fulltext":"","float_fulltext":"","image_fulltext_alt":"","image_fulltext_caption":""}', '{"urla":"","urlatext":"","targeta":"","urlb":"","urlbtext":"","targetb":"","urlc":"","urlctext":"","targetc":""}', '{"article_layout":"","show_title":"","link_titles":"","show_tags":"","show_intro":"","info_block_position":"","info_block_show_title":"","show_category":"","link_category":"","show_parent_category":"","link_parent_category":"","show_author":"","link_author":"","show_create_date":"","show_modify_date":"","show_publish_date":"","show_item_navigation":"","show_vote":"","show_hits":"","show_noauth":"","urls_position":"","alternative_readmore":"","article_page_title":"","show_publishing_options":"","show_article_options":"","show_urls_images_backend":"","show_urls_images_frontend":""}', 1, 0, '', '', 1, 0, '{"robots":"","author":"","rights":""}', 0, '*', ''),
(10, 107, 'Toyotism2', 'toyotism', '<p>The main objectives of the TPS are to design out overburden (<a title="Muri (Japanese term)" href="https://en.wikipedia.org/wiki/Muri_(Japanese_term)">muri</a>) and inconsistency (<a title="Mura (Japanese term)" href="https://en.wikipedia.org/wiki/Mura_(Japanese_term)">mura</a>), and to eliminate waste (<a title="Muda (Japanese term)" href="https://en.wikipedia.org/wiki/Muda_(Japanese_term)">muda</a>). The most significant effects on process value delivery are achieved by designing a process capable of delivering the required results smoothly; by designing out "mura" (inconsistency). It is also crucial to ensure that the process is as flexible as necessary without stress or "muri" (overburden) since this generates "muda" (waste). Finally the tactical improvements of waste reduction or the elimination of muda are very valuable. There are eight kinds of muda that are addressed in the TPS:<sup id="cite_ref-Ohno1998_3-0" class="reference"><a href="https://en.wikipedia.org/wiki/Toyota_Production_System#cite_note-Ohno1998-3">[3]</a></sup></p>', '', 1, 15, '2020-08-25 11:29:59', 498, '', '2020-08-25 11:29:59', 498, 0, NULL, '2020-08-25 11:29:59', NULL, '{"image_intro":"","float_intro":"","image_intro_alt":"","image_intro_caption":"","image_fulltext":"","float_fulltext":"","image_fulltext_alt":"","image_fulltext_caption":""}', '{"urla":"","urlatext":"","targeta":"","urlb":"","urlbtext":"","targetb":"","urlc":"","urlctext":"","targetc":""}', '{"article_layout":"","show_title":"","link_titles":"","show_tags":"","show_intro":"","info_block_position":"","info_block_show_title":"","show_category":"","link_category":"","show_parent_category":"","link_parent_category":"","show_author":"","link_author":"","show_create_date":"","show_modify_date":"","show_publish_date":"","show_item_navigation":"","show_vote":"","show_hits":"","show_noauth":"","urls_position":"","alternative_readmore":"","article_page_title":"","show_publishing_options":"","show_article_options":"","show_urls_images_backend":"","show_urls_images_frontend":""}', 1, 0, '', '', 1, 0, '{"robots":"","author":"","rights":""}', 0, '*', '');

